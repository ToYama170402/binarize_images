name: Release Build and Upload

on:
  push:
    branches:
      - master

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Bump version and push tag
        id: tag
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true

  build-linux:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            linux-cargo-${{ runner.os }}-
      - name: Fetch tags
        run: git fetch --tags
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Build Linux binary
        run: cross build --release --target x86_64-unknown-linux-gnu
      - name: Archive Linux binary
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/* dist/ || true
          cd dist
          tar -czvf ../binarize_images_linux.tar.gz *
          cd ..
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: binarize_images_linux
          path: binarize_images_linux.tar.gz

  build-windows:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: windows-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-cargo-${{ runner.os }}-
      - name: Fetch tags
        run: git fetch --tags
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Build Windows binary
        run: cross build --release --target x86_64-pc-windows-gnu
      - name: Archive Windows binary
        run: |
          mkdir -p dist
          cp target/x86_64-pc-windows-gnu/release/* dist/ || true
          cd dist
          tar -czvf ../binarize_images_windows.tar.gz *
          cd ..
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: binarize_images_windows
          path: binarize_images_windows.tar.gz

  release:
    needs: [build-linux, build-windows, bump-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: binarize_images_linux
          path: .

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: binarize_images_windows
          path: .

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: List files (debug)
        run: ls -lR

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          files: |
            binarize_images_linux.tar.gz
            binarize_images_windows.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
